From ea9f06c42cbad22806fc446329aed3bcb15bc061 Mon Sep 17 00:00:00 2001
From: Don Darling <don.osc2@gmail.com>
Date: Mon, 5 Apr 2010 12:26:15 -0500
Subject: [PATCH] Always return NULL for the last-buffer property.

This property requires the sink to keep a reference to the last buffer
displayed, which means it always holds on to two input buffers.  In some
embedded systems this is not practical, and in fact has been known to cause
driver deadlock if the input buffers are capture driver buffers (via v4l2src
always-copy=FALSE).  There are also issues freeing resources at EOS if the sink
is holding onto a buffer whose memory is being managed by upstream elements.
---
 libs/gst/base/gstbasesink.c |   39 +++++++++++----------------------------
 1 files changed, 11 insertions(+), 28 deletions(-)

diff --git a/libs/gst/base/gstbasesink.c b/libs/gst/base/gstbasesink.c
index 4d35948..5662a9c 100644
--- a/libs/gst/base/gstbasesink.c
+++ b/libs/gst/base/gstbasesink.c
@@ -900,39 +900,22 @@ gst_base_sink_get_ts_offset (GstBaseSink * sink)
 GstBuffer *
 gst_base_sink_get_last_buffer (GstBaseSink * sink)
 {
-  GstBuffer *res;
-
-  g_return_val_if_fail (GST_IS_BASE_SINK (sink), NULL);
-
-  GST_OBJECT_LOCK (sink);
-  if ((res = sink->priv->last_buffer))
-    gst_buffer_ref (res);
-  GST_OBJECT_UNLOCK (sink);
-
-  return res;
+  /* Always return NULL for the last-buffer property.  This property requires
+   * the sink to keep a reference to the last buffer displayed, which means
+   * it always holds on to two input buffers.  In some embedded systems this
+   * is not practical, and in fact has been known to cause driver deadlock if
+   * the input buffers are capture driver buffers (via v4l2src
+   * always-copy=FALSE).  There are also issues freeing resources at EOS if
+   * the sink is holding onto a buffer whose memory is being managed by
+   * upstream elements.
+   */
+  return NULL;
 }
 
 static void
 gst_base_sink_set_last_buffer (GstBaseSink * sink, GstBuffer * buffer)
 {
-  GstBuffer *old;
-
-  GST_OBJECT_LOCK (sink);
-  old = sink->priv->last_buffer;
-  if (G_LIKELY (old != buffer)) {
-    GST_DEBUG_OBJECT (sink, "setting last buffer to %p", buffer);
-    if (G_LIKELY (buffer))
-      gst_buffer_ref (buffer);
-    sink->priv->last_buffer = buffer;
-  } else {
-    old = NULL;
-  }
-  GST_OBJECT_UNLOCK (sink);
-
-  /* avoid unreffing with the lock because cleanup code might want to take the
-   * lock too */
-  if (G_LIKELY (old))
-    gst_buffer_unref (old);
+  /* Do nothing.  See comment in gst_base_sink_get_last_buffer for details. */
 }
 
 /**
-- 
1.6.3.3

